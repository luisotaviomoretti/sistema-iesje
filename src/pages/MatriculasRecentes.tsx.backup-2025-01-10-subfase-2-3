import React, { useEffect, useMemo, useState } from "react";
import { Link, useLocation } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table";
import { Input } from "@/components/ui/input";
import { Download, Trash2, ArrowLeft, RefreshCw, Search } from "lucide-react";
import { toast } from "sonner";
import { useMyRecentEnrollments } from "@/features/matricula-nova/hooks/useMyRecentEnrollments";
import { EnrollmentApiService } from "@/features/matricula-nova/services/api/enrollment";
import type { EnrollmentRecord } from "@/types/database";

const BRL = (v: number) => (v ?? 0).toLocaleString("pt-BR", { style: "currency", currency: "BRL" });

const MatriculasRecentes: React.FC = () => {
  const location = useLocation();
  const [search, setSearch] = useState("");

  const { data: enrollments, isLoading, error, refetch, isFetching } = useMyRecentEnrollments(50);
  
  const filtered = useMemo(() => {
    const term = search.trim().toLowerCase()
    // Filtra por termo (se houver)
    const list = (enrollments || []).filter(e => {
      if (!term) return true
      return (
        e.student_name?.toLowerCase().includes(term) ||
        e.student_cpf?.includes(term)
      )
    })
    // Ordena do mais recente para o mais antigo
    return list.sort((a, b) => {
      const aTime = new Date(a.created_at).getTime() || 0
      const bTime = new Date(b.created_at).getTime() || 0
      return bTime - aTime
    })
  }, [enrollments, search])

  // SEO
  useEffect(() => {
    const mainKeyword = "Últimas Matrículas IESJE";
    document.title = `${mainKeyword} - Histórico de 20 Registros`;
    const metaDesc = document.querySelector('meta[name="description"]') || document.createElement("meta");
    metaDesc.setAttribute("name", "description");
    metaDesc.setAttribute("content", "Lista das 20 últimas matrículas com opção de baixar o PDF da proposta.");
    document.head.appendChild(metaDesc);
    const canonical = document.querySelector('link[rel="canonical"]') || document.createElement("link");
    canonical.setAttribute("rel", "canonical");
    canonical.setAttribute("href", window.location.href);
    document.head.appendChild(canonical);
  }, [location.pathname]);

  const onSoftDelete = async (id: string) => {
    if (!confirm("Tem certeza que deseja excluir esta matrícula?")) return
    try {
      await EnrollmentApiService.softDeleteEnrollment(id)
      toast.success("Matrícula excluída com sucesso")
      refetch()
    } catch (err) {
      toast.error("Erro ao excluir matrícula")
      console.error(err)
    }
  }

  const onDownload = (e: EnrollmentRecord) => {
    if (!e.pdf_url) {
      toast.warning("PDF não disponível para esta matrícula")
      return
    }
    const link = document.createElement('a')
    link.href = e.pdf_url
    link.download = `proposta-${(e.student_name || 'aluno').replace(/\s+/g, '-')}.pdf`
    link.click()
  }

  return (
    <main className="container py-8 space-y-8">
      <header className="flex flex-wrap items-center justify-between gap-4">
        <div className="space-y-1">
          <h1 className="text-3xl font-bold">Últimas Matrículas</h1>
          <p className="text-sm text-muted-foreground">Lista dinâmica das matrículas mais recentes.</p>
        </div>
        <div className="flex gap-2">
          <Button asChild variant="outline">
            <Link to="/">
              <ArrowLeft className="mr-2 h-4 w-4" /> Voltar ao início
            </Link>
          </Button>
          <Button variant="outline" onClick={() => refetch()} disabled={isFetching}>
            <RefreshCw className="mr-2 h-4 w-4" /> Atualizar
          </Button>
        </div>
      </header>

      <Card>
        <CardHeader>
          <div className="flex items-center justify-between gap-2">
            <CardTitle>Matrículas mais recentes</CardTitle>
            <div className="w-full max-w-xs">
              <div className="relative">
                <Search className="absolute left-2 top-2.5 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="Buscar por aluno ou CPF"
                  className="pl-8"
                  value={search}
                  onChange={(e) => setSearch(e.target.value)}
                />
              </div>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          {isLoading ? (
            <div className="text-sm text-muted-foreground">Carregando matrículas...</div>
          ) : error ? (
            <div className="text-sm text-red-600">Erro ao carregar matrículas. Verifique sua sessão/admin.</div>
          ) : filtered.length === 0 ? (
            <div className="text-sm text-muted-foreground">Nenhuma matrícula encontrada.</div>
          ) : (
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Data</TableHead>
                    <TableHead>Aluno</TableHead>
                    <TableHead>Escola</TableHead>
                    <TableHead>Série</TableHead>
                    <TableHead className="text-right">Base</TableHead>
                    <TableHead className="text-right">% Desc.</TableHead>
                    <TableHead className="text-right">Valor Final</TableHead>
                    <TableHead className="text-right">Ações</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filtered.map((e) => (
                    <TableRow key={e.id}>
                      <TableCell>{new Date(e.created_at).toLocaleString("pt-BR")}</TableCell>
                      <TableCell>{e.student_name}</TableCell>
                      <TableCell className="capitalize">{e.student_escola}</TableCell>
                      <TableCell>{e.series_name}</TableCell>
                      <TableCell className="text-right">{BRL(Number(e.base_value))}</TableCell>
                      <TableCell className="text-right">{Number(e.total_discount_percentage || 0)}%</TableCell>
                      <TableCell className="text-right">{BRL(Number(e.final_monthly_value))}</TableCell>
                      <TableCell className="text-right space-x-2">
                        <Button size="sm" variant="secondary" onClick={() => onDownload(e)} disabled={!e.pdf_url} aria-label={`Baixar PDF de ${e.student_name}`}>
                          <Download className="mr-2 h-4 w-4" /> PDF
                        </Button>
                        <Button size="sm" variant="destructive" onClick={() => onSoftDelete(e.id)} aria-label={`Excluir matrícula de ${e.student_name}`}>
                          <Trash2 className="mr-2 h-4 w-4" /> Excluir
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}
        </CardContent>
      </Card>
    </main>
  );
};

export default MatriculasRecentes;

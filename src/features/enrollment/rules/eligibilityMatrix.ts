/**
 * MATRIZ DE ELEGIBILIDADE - FRONTEND
 * Define quais descontos s√£o permitidos por categoria de CEP
 */

import type { CepCategory } from '../utils/cepClassifier';

export interface EligibilityRule {
  blocked: string[];           // Descontos bloqueados
  allowed: string[];          // Descontos explicitamente permitidos
  automatic: string[];        // Descontos aplicados automaticamente
  restrictions: Record<string, string>; // Motivos das restri√ß√µes
}

// üìã MATRIZ COMPLETA DE ELEGIBILIDADE
export const ELIGIBILITY_MATRIX: Record<CepCategory, EligibilityRule> = {
  
  // üèôÔ∏è ALTA RENDA (Po√ßos - Bairros Nobres)
  alta: {
    blocked: [
      'CEP5',   // Desconto espec√≠fico para baixa renda
      'CEP10',  // Desconto espec√≠fico para fora de Po√ßos
      'RES',    // Desconto para outras cidades
      'ABI',    // Bolsa integral - crit√©rio social
      'ABP',    // Bolsa parcial - crit√©rio social
    ],
    allowed: [
      'IIR',       // Irm√£os
      'PASS',      // Filhos de prof IESJE
      'PBS',       // Filhos de prof outras inst
      'COL',       // Filhos de func IESJE
      'SAE',       // Filhos de func outras inst
      'PAV',       // Pagamento √† vista
      'ADIM2',     // Adimpl√™ncia
      'COM_EXTRA', // Negocia√ß√£o comercial
    ],
    automatic: [], // Nenhum desconto autom√°tico
    restrictions: {
      'CEP5': 'Desconto CEP5 exclusivo para bairros de menor renda em Po√ßos de Caldas',
      'CEP10': 'Desconto CEP10 exclusivo para residentes fora de Po√ßos de Caldas',
      'RES': 'Desconto RES exclusivo para residentes de outras cidades',
      'ABI': 'Bolsa Integral reservada para fam√≠lias de menor renda (crit√©rio socioecon√¥mico)',
      'ABP': 'Bolsa Parcial reservada para fam√≠lias de menor renda (crit√©rio socioecon√¥mico)',
    },
  },

  // üèòÔ∏è BAIXA RENDA (Po√ßos - Bairros Populares)
  baixa: {
    blocked: [
      'CEP10',  // Desconto espec√≠fico para fora de Po√ßos
      'RES',    // Desconto para outras cidades
    ],
    allowed: [
      'CEP5',      // Desconto autom√°tico por localiza√ß√£o
      'IIR',       // Irm√£os
      'PASS',      // Filhos de prof IESJE
      'PBS',       // Filhos de prof outras inst
      'COL',       // Filhos de func IESJE
      'SAE',       // Filhos de func outras inst
      'ABI',       // Bolsa integral (eleg√≠vel)
      'ABP',       // Bolsa parcial (eleg√≠vel)
      'PAV',       // Pagamento √† vista
      'ADIM2',     // Adimpl√™ncia
      'COM_EXTRA', // Negocia√ß√£o comercial
    ],
    automatic: ['CEP5'], // CEP5 aplicado automaticamente
    restrictions: {
      'CEP10': 'Desconto CEP10 exclusivo para residentes fora de Po√ßos de Caldas',
      'RES': 'Desconto RES exclusivo para residentes de outras cidades',
    },
  },

  // üåç FORA DE PO√áOS DE CALDAS
  fora: {
    blocked: [
      'CEP5',  // Desconto espec√≠fico para baixa renda de Po√ßos
      'ABI',   // Bolsas restritas a residentes de Po√ßos
      'ABP',   // Bolsas restritas a residentes de Po√ßos
    ],
    allowed: [
      'CEP10',     // Desconto autom√°tico por localiza√ß√£o
      'RES',       // Desconto para outras cidades
      'IIR',       // Irm√£os (se estudam na institui√ß√£o)
      'PASS',      // Filhos de prof IESJE (se trabalha no IESJE)
      'PBS',       // Filhos de prof outras inst
      'COL',       // Filhos de func IESJE (se trabalha no IESJE)
      'SAE',       // Filhos de func outras inst
      'PAV',       // Pagamento √† vista
      'ADIM2',     // Adimpl√™ncia
      'COM_EXTRA', // Negocia√ß√£o comercial
    ],
    automatic: ['CEP10'], // CEP10 aplicado automaticamente
    restrictions: {
      'CEP5': 'Desconto CEP5 exclusivo para bairros de menor renda em Po√ßos de Caldas',
      'ABI': 'Bolsas filantr√≥picas s√£o restritas a estudantes residentes em Po√ßos de Caldas',
      'ABP': 'Bolsas filantr√≥picas s√£o restritas a estudantes residentes em Po√ßos de Caldas',
    },
  },
};

/**
 * Verificar se um desconto √© eleg√≠vel para uma categoria
 */
export function isDiscountEligible(categoria: CepCategory | null, discountCode: string): boolean {
  if (!categoria) return true; // Se n√£o h√° categoria, permitir (sistema permissivo)
  
  const rules = ELIGIBILITY_MATRIX[categoria];
  return !rules.blocked.includes(discountCode);
}

/**
 * Obter descontos bloqueados para uma categoria
 */
export function getBlockedDiscounts(categoria: CepCategory | null): string[] {
  if (!categoria) return [];
  return ELIGIBILITY_MATRIX[categoria].blocked;
}

/**
 * Obter descontos autom√°ticos para uma categoria
 */
export function getAutomaticDiscounts(categoria: CepCategory | null): string[] {
  if (!categoria) return [];
  return ELIGIBILITY_MATRIX[categoria].automatic;
}

/**
 * Obter motivo da restri√ß√£o de um desconto
 */
export function getRestrictionReason(categoria: CepCategory | null, discountCode: string): string | null {
  if (!categoria) return null;
  return ELIGIBILITY_MATRIX[categoria].restrictions[discountCode] || null;
}

/**
 * Obter estat√≠sticas de elegibilidade
 */
export function getEligibilityStats(categoria: CepCategory | null, allDiscounts: string[]) {
  if (!categoria) {
    return {
      total: allDiscounts.length,
      eligible: allDiscounts.length,
      blocked: 0,
      automatic: 0,
    };
  }

  const rules = ELIGIBILITY_MATRIX[categoria];
  const blocked = allDiscounts.filter(d => rules.blocked.includes(d));
  const eligible = allDiscounts.filter(d => !rules.blocked.includes(d));
  const automatic = rules.automatic.filter(d => allDiscounts.includes(d));

  return {
    total: allDiscounts.length,
    eligible: eligible.length,
    blocked: blocked.length,
    automatic: automatic.length,
  };
}

/**
 * Filtrar descontos eleg√≠veis
 */
export function filterEligibleDiscounts<T extends { codigo: string }>(
  categoria: CepCategory | null,
  discounts: T[]
): T[] {
  if (!categoria) return discounts; // Sistema permissivo
  
  const rules = ELIGIBILITY_MATRIX[categoria];
  return discounts.filter(discount => !rules.blocked.includes(discount.codigo));
}

/**
 * Validar lista de descontos selecionados
 */
export function validateSelectedDiscounts(
  categoria: CepCategory | null,
  selectedCodes: string[]
): {
  valid: string[];
  invalid: string[];
  reasons: Record<string, string>;
} {
  const valid: string[] = [];
  const invalid: string[] = [];
  const reasons: Record<string, string> = {};

  selectedCodes.forEach(code => {
    if (isDiscountEligible(categoria, code)) {
      valid.push(code);
    } else {
      invalid.push(code);
      const reason = getRestrictionReason(categoria, code);
      if (reason) reasons[code] = reason;
    }
  });

  return { valid, invalid, reasons };
}

/**
 * Obter sugest√µes de descontos alternativos
 */
export function getAlternativeDiscounts<T extends { codigo: string; categoria: string }>(
  categoria: CepCategory | null,
  blockedCode: string,
  allDiscounts: T[]
): T[] {
  if (!categoria) return [];

  // Encontrar desconto bloqueado
  const blockedDiscount = allDiscounts.find(d => d.codigo === blockedCode);
  if (!blockedDiscount) return [];

  // Buscar alternativas na mesma categoria
  return filterEligibleDiscounts(categoria, allDiscounts)
    .filter(d => 
      d.categoria === blockedDiscount.categoria && 
      d.codigo !== blockedCode
    )
    .slice(0, 3); // M√°ximo 3 sugest√µes
}

/**
 * Debug completo da matriz para uma categoria
 */
export function debugEligibilityMatrix(categoria: CepCategory | null): void {
  if (!categoria) {
    console.log('ü§∑ Nenhuma categoria fornecida - sistema permissivo');
    return;
  }

  const rules = ELIGIBILITY_MATRIX[categoria];
  
  console.group(`üìã Matriz de Elegibilidade - ${categoria.toUpperCase()}`);
  console.log('‚úÖ Permitidos:', rules.allowed);
  console.log('‚ùå Bloqueados:', rules.blocked);
  console.log('ü§ñ Autom√°ticos:', rules.automatic);
  console.log('üìù Restri√ß√µes:', rules.restrictions);
  console.groupEnd();
}
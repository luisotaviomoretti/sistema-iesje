import React, { useMemo } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { useEnrollment } from "@/features/enrollment/context/EnrollmentContext";
import { DiscountSummary } from "@/features/enrollment/components/DiscountSummary";
import { calculateTotals } from "@/features/enrollment/utils/discounts";
import { generateProposalPdf } from "@/features/enrollment/utils/proposal-pdf";
import { usePublicDiscountTypes } from "@/features/admin/hooks/useDiscountTypes";
import { useMaxDiscountLimit } from "@/features/admin/hooks/useEnrollmentConfig";
import { TIPOS_DESCONTO, MAX_DESCONTO_TOTAL } from "@/features/enrollment/constants";
import { Download, AlertCircle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { Alert, AlertDescription } from "@/components/ui/alert";
const FinalConfirmation: React.FC = () => {
  const { selectedStudent, matricula, descontos, trilhos } = useEnrollment();
  const { toast } = useToast();
  
  // üîÑ MIGRA√á√ÉO PROGRESSIVA: Dados din√¢micos do admin
  const { data: dynamicDiscountTypes } = usePublicDiscountTypes();
  const { data: maxDiscountLimit } = useMaxDiscountLimit();
  
  // üéØ FALLBACK INTELIGENTE
  const discountTypes = useMemo(() => {
    return dynamicDiscountTypes?.length > 0 ? dynamicDiscountTypes : TIPOS_DESCONTO;
  }, [dynamicDiscountTypes]);
  
  // Determinar o CAP baseado no trilho selecionado
  const effectiveMaxDiscount = useMemo(() => {
    if (trilhos?.trilho_escolhido === 'A') {
      return 100; // Trilho A - Sem limite
    } else if (trilhos?.trilho_escolhido === 'B') {
      return 25; // Trilho B - CAP de 25%
    }
    // Trilho C ou padr√£o - usar configura√ß√£o do sistema
    return maxDiscountLimit ?? MAX_DESCONTO_TOTAL;
  }, [trilhos?.trilho_escolhido, maxDiscountLimit]);
  
  // Mapear nomes dos trilhos
  const trilhoName = useMemo(() => {
    switch (trilhos?.trilho_escolhido) {
      case 'A': return 'Especial (Sem limite)';
      case 'B': return 'Combinado (M√°x. 25%)';
      case 'C': return 'Normal (M√°x. 60%)';
      default: return 'Nenhum selecionado';
    }
  }, [trilhos?.trilho_escolhido]);

  const baseMensal = Number(matricula?.valor_mensalidade_base || 0);
  const descontosList = useMemo(() => descontos as any[], [descontos]);
  const summary = useMemo(() => {
    return calculateTotals(baseMensal, descontosList as any, discountTypes, effectiveMaxDiscount);
  }, [baseMensal, descontosList, discountTypes, effectiveMaxDiscount]);

  const disabled = !selectedStudent || !matricula?.serie_ano || !matricula?.turno || baseMensal <= 0;

  const handleConfirm = () => {
    toast({ title: "Matr√≠cula confirmada", description: "Dados salvos localmente. Conecte ao Supabase para persistir." });
  };
  const handleCancel = () => {
    toast({ title: "Opera√ß√£o cancelada" });
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Confirma√ß√£o Final</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="text-sm">
          <div>Aluno: <span className="font-medium">{selectedStudent?.nome_completo || "‚Äî"}</span></div>
          <div>S√©rie/Ano ‚Ä¢ Turno: <span className="font-medium">{matricula?.serie_ano || "‚Äî"} ‚Ä¢ {matricula?.turno || "‚Äî"}</span></div>
        </div>
        
        {/* Mostrar trilho selecionado */}
        <div className="flex items-center gap-2">
          <span className="text-sm text-muted-foreground">Trilho:</span>
          <Badge variant={trilhos?.trilho_escolhido ? "default" : "outline"}>
            {trilhoName}
          </Badge>
        </div>
        
        {/* Alertar se h√° diferen√ßa entre o c√°lculo esperado */}
        {trilhos?.trilho_escolhido && summary.totalPercent > effectiveMaxDiscount && (
          <Alert>
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              O total de descontos ({summary.totalPercent}%) excede o limite do {trilhoName} ({effectiveMaxDiscount}%).
              Ser√° aplicado o valor m√°ximo permitido.
            </AlertDescription>
          </Alert>
        )}
        
        <DiscountSummary baseMensal={baseMensal} descontos={descontosList as any} />
        <div className="flex flex-wrap gap-2 pt-2">
          <Button
            type="button"
            variant="secondary"
            onClick={() => generateProposalPdf({ 
              flow: "rematricula", 
              student: selectedStudent as any, 
              matricula: matricula as any, 
              descontos: descontosList as any, 
              baseMensal,
              discountTypes,
              maxDiscountLimit: effectiveMaxDiscount
            })}
          >
            <Download className="mr-2 h-4 w-4" />
            Download Proposta
          </Button>
          <Button onClick={handleConfirm} disabled={disabled}>Confirmar Matr√≠cula</Button>
          <Button onClick={handleCancel} variant="ghost">Cancelar</Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default FinalConfirmation;

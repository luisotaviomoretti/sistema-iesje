import React, { useMemo } from "react";
import type { Desconto } from "@/features/enrollment/types";
import { calculateTotals } from "@/features/enrollment/utils/discounts";
import { usePublicDiscountTypes } from "@/features/admin/hooks/useDiscountTypes";
import { useMaxDiscountLimit } from "@/features/admin/hooks/useEnrollmentConfig";
import { TIPOS_DESCONTO, MAX_DESCONTO_TOTAL } from "@/features/enrollment/constants";
import { useEnrollment } from "@/features/enrollment/context/EnrollmentContext";

interface DiscountSummaryProps {
  baseMensal: number;
  descontos: Desconto[];
}

export const DiscountSummary: React.FC<DiscountSummaryProps> = ({ baseMensal, descontos }) => {
  // Obter o trilho selecionado do contexto
  const { trilhos } = useEnrollment();
  
  // ðŸ”„ MIGRAÃ‡ÃƒO PROGRESSIVA: Dados dinÃ¢micos do admin
  const { data: dynamicDiscountTypes } = usePublicDiscountTypes();
  const { data: maxDiscountLimit } = useMaxDiscountLimit();
  
  // ðŸŽ¯ FALLBACK INTELIGENTE
  const discountTypes = useMemo(() => {
    return dynamicDiscountTypes?.length > 0 ? dynamicDiscountTypes : TIPOS_DESCONTO;
  }, [dynamicDiscountTypes]);
  
  // Determinar o CAP baseado no trilho selecionado
  const effectiveMaxDiscount = useMemo(() => {
    if (trilhos?.trilho_escolhido === 'A') {
      return 100; // Trilho A - Sem limite
    } else if (trilhos?.trilho_escolhido === 'B') {
      return 25; // Trilho B - CAP de 25%
    }
    // Trilho C ou padrÃ£o
    return maxDiscountLimit ?? MAX_DESCONTO_TOTAL;
  }, [trilhos?.trilho_escolhido, maxDiscountLimit]);
  
  // Calcular totais com dados dinÃ¢micos (versÃ£o simplificada)
  const summary = useMemo(() => {
    return calculateTotals(baseMensal, descontos, discountTypes, effectiveMaxDiscount);
  }, [baseMensal, descontos, discountTypes, effectiveMaxDiscount]);

  return (
    <div className="space-y-3">
      <div className="text-sm text-muted-foreground">
        Valor base: <span className="font-medium">R$ {baseMensal.toFixed(2)}</span>
      </div>
      <ul className="space-y-1 text-sm">
        {summary.items.map((it) => (
          <li key={it.id} className="flex items-center justify-between">
            <span>{it.codigo} â€¢ {it.descricao}</span>
            <span className="font-medium">-{it.percentual}%</span>
          </li>
        ))}
      </ul>
      <div className="h-px bg-border" />
      <div className="flex items-center justify-between text-sm">
        <span>Total de descontos</span>
        <span className="font-semibold">
          {summary.cappedPercent}% 
          {summary.capReached && (
            <em className="text-muted-foreground">
              (limitado a {effectiveMaxDiscount}%)
              {effectiveMaxDiscount !== MAX_DESCONTO_TOTAL && (
                <span className="text-blue-600 ml-1">âœ¨</span>
              )}
            </em>
          )}
        </span>
      </div>
      <div className="flex items-center justify-between text-sm">
        <span>Valor final</span>
        <span className="font-semibold">R$ {summary.finalValue.toFixed(2)}</span>
      </div>
      <div className="text-xs text-muted-foreground">
        Economia mensal: R$ {summary.savingsMonthly.toFixed(2)} â€¢ anual: R$ {summary.savingsAnnual.toFixed(2)}
      </div>
    </div>
  );
};
